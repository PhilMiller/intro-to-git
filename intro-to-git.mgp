%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Introduction to Git
%% Bart Trojanowski (C) 2007
%%
#%tfdir "/usr/share/fonts/truetype/"
%deffont "standard" xfont "helvetica-medium-r", tfont "standard.ttf"
%deffont "slant" xfont "helvetica-medium-i", tfont "standard.ttf"
%deffont "thick" xfont "helvetica-bold-r", tfont "thick.ttf"
%deffont "typewriter" xfont "courier-medium-r", tfont "typewriter.ttf"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Default settings per each line numbers.
%%
%default 1 area 90 90 5 5, leftfill, size 2, fore "gray20", back "white", font "standard", hgap 0
%default 2 size 7, vgap 10, prefix " ", ccolor "black"
%default 3 size 2, bar "gray70", vgap 10
%default 4 size 5, fore "gray20", vgap 30, prefix " ", font "standard"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Default settings that are applied to TAB-indented lines.
%%
%tab 1 size 5, vgap 40, prefix "  ", icon box "green" 50
%tab 2 size 4, vgap 40, prefix "      ", icon arc "yellow" 50
%tab 3 size 3, vgap 40, prefix "            ", icon delta3 "white" 40
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page
%nodefault
%size 6.5, font "standard", back "white", ccolor "black"




%center, fore "Blue", font "standard", hgap 60, size 6.5
Introduction to GIT
%bar "skyblue" 6 15 70
The distributed SCM
%font "standard", hgap 0



%size 5, fore "darkblue"
Bart Trojanowski
%size 4.5
<bart@jukie.net>
http://www.jukie.net/~bart/


%size 3, fore "black", hgap 20
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Overview

	Concepts

	History

	Usage

	Wrap up
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Concepts

	Source Control Management
		track changes to files
		repository / database of changes
		working directory / current state

%pause
	Centralized SCM
		server: single database
		client: working directory & state

%pause
	Decentralized SCM
		anyone can be a server
		repository coupled with working directory
		complete history
		disconnected operation
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM components

	Repository contents
%mark
%newimage -xscrzoom 100 "repo-obj.eps"
%again
		objects / blobs / diffs / deltas / patches








%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM components

	Repository contents
%mark
%newimage -xscrzoom 100 "repo-commit.eps"
%again
		objects / blobs / diffs / deltas / patches
		commits / changesets / revisions







%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM components

	Repository contents
%mark
%newimage -xscrzoom 100 "repo-ancestry.eps"
%again
		objects / blobs / diffs / deltas / patches
		commits / changesets / revisions
		ancestry / history






%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM components

	Repository contents
%mark
%newimage -xscrzoom 100 "repo-tags.eps"
%again
		objects / blobs / diffs / deltas / patches
		commits / changesets / revisions
		ancestry / history
		tags / labels





%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM components

	Repository contents
%mark
%newimage -xscrzoom 100 "repo-branches.eps"
%again
		objects / blobs / diffs / deltas / patches
		commits / changesets / revisions
		ancestry / history
		tags / labels
		branches / heads

%pause
	Working directory
		files
		list of files to add/delete
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

SCM operations

	Modify
		checkout
		add, delete, and rename
		commit

%pause
	Information
		status
		diff
		log

%pause
	Tagging

	Branching
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Centralized SCM

	Checkout
		create working directory
		get state from 
%cont, fore "red"
server
%fore "black"
		populate working directory
	Commit
		package up all changes
		send changes to 
%cont, fore "red"
server
%fore "black"
	Diff
		get objects or diffs from 
%cont, fore "red"
server
%fore "black"
		display
	Log
		get history from 
%cont, fore "red"
server
%fore "black"
		display
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Centralized SCM

%newimage -xscrzoom 100 "centralized.eps"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM

%area 40 90 5 18, leftfill
	Checkout
		get 
%cont, fore "blue"
repository 
%cont, fore "black"
state
		update working directory
	Commit
		package changes
		update 
%cont, fore "blue"
repository
%fore "black"
	Diff
		display 
%cont, fore "blue"
repository 
%cont, fore "black"
diffs
	Log
		display 
%cont, fore "blue"
repository 
%cont, fore "black"
history

%pause
%area 40 90 50 18, leftfill
	Clone
		create 
%cont, fore "blue"
repository
%fore "black"
		create working directory
		get history from 
%cont, fore "red"
server 
%fore "black"
		populate working directory
	Pull / Fetch
		get changes from 
%cont, fore "red"
server 
%fore "black"
		update 
%cont, fore "blue"
repository
%fore "black"
	Push
		send changes to 
%cont, fore "red"
server 
%fore "black"
		update 
%cont, fore "blue"
repository
%fore "black"

%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM

%newimage -xscrzoom 100 "decentralized.eps"

%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-1-upstream.eps"
public repository
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-2-local.eps"
make a local clone
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-3-topic.eps"
create topic branches
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-4-push.eps"
push changes between any repositories
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-5-publish.eps"
publish changes to public server
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized SCM operations

%newimage -xscrzoom 100 "cloning-6-trusted.eps"
share changes with trusted peers
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Is Decentralized good?




%pause, size 20, center
YES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Is Decentralized good?

	non-intrusive micro-commits

	detached operation

	no single point of failure

	backups are trivial
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Birth of GIT

	2002
		Linus uses BitKeeper for tracking Linux
		BK gets better
		Linux development scales better
%pause
	April 6, 2005
		BitMover drops free license
		Linus writes his own SCM, GIT
%pause
	April 18, 2005
		GIT can merge
%pause
	June 16, 2005
		GIT is officially used to track Linux
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

GIT gets better





%fore "blue", center
And then realize that nothing is perfect.
Git is just *closer* to perfect than any
other SCM out there.
%font "slant", fore "black", right
-Linus          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Using GIT

%area 40 90 5 18, leftfill
	Basics
		Creating a repository
		Creating commits
		Looking at the history

%pause
	Tagging & Branching
		Creating
		Merging
		Rebase

%pause
	Patches
		Generating
		Accepting

%area 40 90 50 18, leftfill
%pause
	Decentralized
		Cloning
		Fetch / Pull
		Push
		Daemon
		Remotes

%pause
	Tools
		Working with other SCMs
		Housekeeping
		Visualization

%pause
	Tricks
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Commands

	format
%font "typewriter", fore "blue"
 $ git <options> <command> <cmd-options>
%font "standard", fore "black"

	list of commands
%font "typewriter", fore "blue"
 $ git help
%font "standard", fore "black"

%pause
	usage info
%font "typewriter", fore "blue"
 $ git init -h
%font "typewriter", fore "grey20"
 usage: git-init [--template=...] [--shared]
%font "standard", fore "black"

%pause
	detailed help
%font "typewriter", fore "grey20"
 $ man git-init
%font "typewriter", fore "blue"
 $ git help init
 $ git init --help
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : GIT 1.5.0

	easier merging
		use 
%cont, font "typewriter", fore "blue"
git-merge 
%cont, font "standard", fore "black"
command

	better remote management
		remote vs local branch separation
		common usage patterns are automated
		new 
%cont, font "typewriter", fore "blue"
git-remote 
%cont, font "standard", fore "black"
command

	lots of minor changes
		heavy use of 
%cont, font "typewriter", fore "blue"
.git/config 
%cont, font "standard", fore "black"
for configuration
		improvements to 
%cont, font "typewriter", fore "blue"
git-add 
%cont, font "standard", fore "black"
and 
%cont, font "typewriter", fore "blue"
git-rm 
%cont, font "standard", fore "black"
commands
		better documentation
		...


%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Configuration

	global configuration is in ~/.gitconfig
%font "typewriter", fore "blue",size 4
    $ git config --global --list
%font "typewriter", fore "grey20"
    user.name=Bart Trojanowski
    user.email=bart@jukie.net
    color.branch=auto
    color.diff=auto
    color.pager=true
    color.status=auto
%font "standard", fore "black"

	repository configuration is in repo/.git/config
%font "typewriter", fore "blue",size 4
    $ git config --list
%font "typewriter", fore "grey20"
    section.variable=value
    ...
%font "standard", fore "black"

	changing settings
%font "typewriter", fore "blue",size 4
    $ git config --global user.name "Bart Trojanowski"
    $ git config --global user.email bart@jukie.net
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Creating a repository

%font "typewriter", fore "grey20"
 $ mkdir my-project
 $ cd my-project
%font "typewriter", fore "blue"
 $ git init
%font "typewriter", fore "grey20"
 Initialized empty Git repository in .git
%font "standard", fore "black"

	Initial .git directory
%font "typewriter", fore "grey20"
 $ du -sh .git
 60K     .git
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Creating commits

	adding files
%font "typewriter", fore "grey20"
  $ echo this is a test > test.1
  $ echo this is also a test > test.2
%font "typewriter", fore "blue"
  $ git add test.1 test.2
  $ git commit -a -m "adding some files"
%size 3, fore "grey20"
     Created initial commit 4bba26ed61c918687d9b34e9fcbef12a6d5bf01a
      2 files changed, 2 insertions(+), 0 deletions(-)
      create mode 100644 test.1
      create mode 100644 test.2
%size 5

%font "standard", fore "black"
	add everything, recursive
%font "typewriter", fore "blue"
    $ git add .
%font "standard", fore "black"

	commit just one file, interactive
%font "typewriter", fore "blue"
    $ git commit file.1
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Creating commits

	removing files
%font "typewriter", fore "grey20"
  $ git rm test.2
%font "typewriter", fore "blue"
  $ git commit -a -m"removing a file"
%size 3, fore "grey20"
     Created commit b4e0bebe216fd53b540134a659254e192cbce57c
      1 files changed, 0 insertions(+), 1 deletions(-)
      delete mode 100644 test.2
%size 5
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Current state

	Show uncommitted file changes
%font "typewriter", fore "grey20"
  $ echo more text >> test.1
%font "typewriter", fore "blue"
  $ git status
%font "typewriter", fore "grey20"
  # On branch master
  # Changed but not updated:
  #       modified:   test.1
%font "standard", fore "black"

%pause
	show the differences
%font "typewriter", fore "blue"
  $ git diff 
%font "typewriter", fore "grey20"
  --- a/test.1
  +++ b/test.1
  @@ -1 +1,2 @@
   this is a test
  +more text
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Cleanup

	drop all changes
%font "typewriter", fore "blue"
  $ git reset --hard 
%font "standard", fore "black"

	revert changes to a file
%font "typewriter", fore "blue"
  $ git checkout file
%font "standard", fore "black"

%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Looking at the history

	review commit messages
%font "typewriter", fore "blue"
  $ git log
%font "standard", fore "black"
%pause
		with ranges
%font "typewriter", fore "blue", size 5
  $ git log -10
  $ git log --since="2 weeks ago"
  $ git log tag..
  $ git log tag1..tag2
  $ git log ^common branch1 branch2
%font "standard", fore "black"
%pause
		limit to commits that alter a path
%font "typewriter", fore "blue", size 5
  $ git log -- file
%font "standard", fore "black"
%pause
		varying levels of information
%font "typewriter", fore "blue", size 5
  $ git log --pretty=oneline
  $ git log --pretty=email
  $ git log --stat --summary
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Looking at the history (2)

	review changes in commits
%font "typewriter", fore "blue"
  $ git whatchanged
%font "standard", fore "black"
		like git-log, but also lists files that changed

	limit as with log
%font "typewriter", fore "blue"
  $ git whatchanged --since="May 10"
  $ git whatchanged tag1..tag2 -- file
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Looking at the history (3)

	see what changes one commit made (diff)
%font "typewriter", fore "blue", size 5
  $ git show <commit>
%font "standard", fore "black"
		like git-log, but also lists diff's

	look at diffs for all/some commits
%font "typewriter", fore "blue", size 5
  $ git log -p
  $ git log -p tag..tag1
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Basics : Looking at the history (4)

	searching for a change
%font "typewriter", fore "blue"
  $ git log \\
        --since="June 5, 2005" \\
        --grep="find this" \\
        --author="bob@domain.com" \\
        --pretty=oneline \\
        some-branch -- crypto/*.c
%font "standard", fore "black"

	what can I search for?
%font "typewriter", fore "blue"
  $ man git-rev-list
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Commit IDs

	reference by
		SHA1 sum
%font "typewriter", fore "blue", size 3
       git show b4e0bebe216fd53b540134a659254e192cbce57c
%font "standard", fore "black"
		short SHA1 sum
%font "typewriter", fore "blue", size 3
       git show b4e0bebe
%font "standard", fore "black"
		a tag or branch name
%font "typewriter", fore "blue", size 3
       git show something
%font "standard", fore "black"
		current commit
%font "typewriter", fore "blue", size 3
       git show HEAD
%font "standard", fore "black"

%pause
		relative to a commit
%font "typewriter", fore "blue", size 3
       git show HEAD^
       git show HEAD^^^^^^^^^^
       git show HEAD~10
%font "standard", fore "black"
		ranges and exclusions
%font "typewriter", fore "blue", size 3
       git log HEAD~10..HEAD
       git log ^HEAD~10 HEAD
       git log ^something tag branch
%font "standard", fore "black", size 5
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tagging

	symbolic name for a commit
	shorter then SHA1

	tag a commit
%font "typewriter", fore "blue", size 5
  $ git tag some-name
  $ git tag -f some-name
  $ git tag another-name b4e0bebe...
%font "standard", fore "black"
	list existing tags
%font "typewriter", fore "blue", size 5
  $ git tag -l
  some-name
  another-name
%font "standard", fore "black"
	remove a tag
%font "typewriter", fore "blue", size 5
  $ git tag -d some-name
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching

	always on a branch
	branch is a pointer to a commit
	two types of branches
%pause,	size 5
		local branches
%font "typewriter", fore "grey40"
     master
%pause
     whatever-you-want
%font "standard", fore "black"
%pause,	size 5
		remote branches
%font "typewriter", fore "grey40"
     origin/master
%pause
     some-host/their-branch
%font "standard", fore "black"

%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : creating

	creating a branch
%font "typewriter", fore "blue"
  $ git branch this
  $ git branch another b4e0bebe...
  $ git branch four-back HEAD~4
%font "standard", fore "black"

	show local
%font "typewriter", fore "blue"
  $ git branch
%font "typewriter", fore "grey20"
    another
  * master
%font "standard", fore "black"
	show remote
%font "typewriter", fore "blue"
  $ git branch -r
%font "typewriter", fore "grey20"
    origin/master
    origin/foo
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : switching

	switch to an existing branch
%font "typewriter", fore "blue"
  $ git checkout some-branch
%pause
  $ git checkout -f some-branch
%font "standard", fore "black"

%pause
	switch to a new branch 
%font "typewriter", fore "blue"
  $ git branch new-branch master
  $ git checkout new-branch
%font "standard", fore "black"
       ... or ...
%font "typewriter", fore "blue"
  $ git checkout -b new-branch master
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : merging





%fore "blue", center
Merges suck.
Unless you're smart, and use git.
%font "slant", fore "black", right
-Linus          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : merging

	merge another branch
%font "typewriter", fore "blue"
  $ git merge some-branch
%font "standard", fore "black"

%pause
	expecting bugs?
%font "typewriter", fore "blue"
  $ git merge --no-commit some-branch
%font "typewriter", fore "grey20"
  $ fix
  $ test
%font "typewriter", fore "blue"
  $ git commit -a
%font "standard", fore "black"

%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : rebase

	have some work on a branch
%font "typewriter", fore "grey20", size 3
             A---B---C    <- some-work
            /
       D---E---F---G      <- master
%font "standard", fore "black", size 5
%pause
	could merge
%font "typewriter", fore "blue"
  $ git checkout -b new-work master
  $ git merge some-work
%font "typewriter", fore "grey20", size 3
             A---B---C      <- some-work
            /         \\
       D---E           H    <- new-work
            \\         / 
             F-------G      <- master
%font "standard", fore "black", size 5
%pause
	or rebase
%font "typewriter", fore "blue"
  $ git checkout some-work
  $ git rebase master
%font "typewriter", fore "grey20", size 3
                     A---B---C   <- some-work
                    /
       D---E---F---G             <- master
%font "standard", fore "black", size 5
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Branching : changing history with rebase

	made some commits
%font "typewriter", fore "grey20", size 3
             A--B--C--D--E(master)
%font "standard", fore "black", size 5
%pause

	realized you made a mistake in commit 'B'
	go back
%font "typewriter", fore "blue"
  $ git checkout HEAD~3
  $ git commit --amend
%font "typewriter", fore "grey20", size 3
             .B'(HEAD)
	    /
           A--B--C--D--E(master)
%font "standard", fore "black", size 5
%pause

	bring back the other commits
%font "typewriter", fore "blue"
  $ git rebase HEAD master
%font "typewriter", fore "grey20", size 3
             A--B'--C--D--E(master)
%font "standard", fore "black", size 5
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Patches

	standard diff
%font "typewriter", fore "grey20", size 4
    $ diff -u a b
%font "typewriter", fore "purple", size 4
    --- a   2007-03-04 22:40:11.473402253 -0500
    +++ b   2007-03-04 22:40:25.365464311 -0500
%font "typewriter", fore "brown", size 4
    @@ -1 +1 @@
%font "typewriter", fore "red", size 4
    -old text
%font "typewriter", fore "green", size 4
    +new text

%pause
%font "standard", fore "black"
	git diff
%font "typewriter", fore "blue", size 4
    $ git diff HEAD~1
%font "typewriter", fore "darkblue", size 4
    diff --git a/file b/file
    index acc4bcb..eee417f 100644
%font "typewriter", fore "purple", size 4
    --- a/file
    +++ b/file
%font "typewriter", fore "brown", size 4
    @@ -1 +1 @@
%font "typewriter", fore "red", size 4
    -old text
%font "typewriter", fore "green", size 4
    +new text
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Patches : Generating

	just diffs
%font "typewriter", fore "blue", size 4
    $ git diff -1         > last.patch
    $ git diff tag~1..tag > before-tag.patch
    $ git diff ^good      > since-good.patch
%font "standard", fore "black"

%pause
	git patches
		file per commit
%font "typewriter", fore "blue", size 4
    $ git format-patch -2
%font "typewriter", fore "grey20"
    00001-this-is-my-first-patch.txt
    00002-this-is-my-most-recent-patch.txt
%font "standard", fore "black"
		an mbox file
%font "typewriter", fore "blue", size 4
    $ git format-patch a..b --stdout -k > patches
%font "standard", fore "black"
		send email
%font "typewriter", fore "blue", size 4
    $ git send-email --to bart@jukie.net patches
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Patches : Accepting

	apply patch
%font "typewriter", fore "blue",size 5
  $ git apply changes-from-bob.patch
  $ git add new-files...
  $ git rm old-files...
  $ git commit -a \\
         -m"fixes soemthing" \\
         --author="Bob <bob@gmail.com>"
%font "standard", fore "black"

%pause
	apply and commit a git patch
%font "typewriter", fore "blue",size 5
  $ git am -3 -s -k 00001-first-patch.txt

%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized : Cloning

	cloning local repository
%font "typewriter", fore "blue",size 4
    $ git clone /var/git/our-repo.git my-work
    $ git clone ~bob/export.git working-with-bob
    $ git clone -l -s my-work my-work-2
%font "standard", fore "black"

%pause
	cloning remote repository
%font "typewriter", fore "blue",size 4
    $ git clone ssh-server:~bart/something my-work
    $ git clone http://web-server/git-repo my-work
    $ git clone git://git-server/git-repo my-work
%font "standard", fore "black"

%pause
	with reference
%font "typewriter", fore "blue",size 4
    $ git clone --reference existing-full-clone \\
          git://git-server/git-repo quick-test
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized : Fetch / Pull

	get updates from server
%font "typewriter", fore "blue"
  $ git fetch origin
  $ git merge origin/master
%font "standard", fore "black"
  ... or ...
%font "typewriter", fore "blue"
  $ git pull origin
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized : Push

	publish updates to server
%font "typewriter", fore "blue"
  $ git push publish
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized : Daemon

	run server
%font "typewriter", fore "blue"
  $ git daemon /src/software.git
%font "standard", fore "black"

	from inetd
		see:  
%cont, font "typewriter", fore "blue"
man git-daemon
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Decentralized : Remotes

	list remotes
%font "typewriter", fore "blue"
  $ git remote
%font "typewriter", fore "grey20"
  origin
%font "standard", fore "black"

	new remotes
%font "typewriter", fore "blue"
  $ git remote add bob git://server/bob.git/
%font "standard", fore "black"

	update tracked branches
%font "typewriter", fore "blue"
  $ git remote update
  $ git branch -r
%font "typewriter", fore "grey20"
  bob/one
  bob/two
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : Finding regressions

	found a regression
		HEAD is bad
		known last good point
		want to find first bad commit

	binary search
%pause
%font "typewriter", fore "blue",size 4
    $ git bisect start
    $ git bisect bad
    $ git bisect good my-last-release
%font "standard", fore "black"

		finds commit to test next
		tell it 'good' or 'bad'
		repeat
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : Working with other SCMs

%font "typewriter", fore "blue",size 4
    git-svn
    git-svnimport

    git-cvsimport
    git-cvsserver        
%font "standard", fore "black"

	can also import
		arch
		darcs
		p4
		hg
		bk
           ... others

	tailor
		Swiss Army knife
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : Housekeeping 

	forgetting changes
%font "typewriter", fore "blue"
    $ git clean -d -x
    $ git reset --hard HEAD
%font "standard", fore "black"

	repository cleanup
%font "typewriter", fore "blue"
    $ git prune -d
    $ git fsck
%font "standard", fore "black"

	lost commits
%font "typewriter", fore "blue"
    $ git lost-found
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : Visualization

	commit tools
%font "typewriter", fore "blue"
    $ git-gui
    $ gct
%font "standard", fore "black"

	revision tools
%font "typewriter", fore "blue"
    $ gitk
    $ qgit
    $ gitview
%font "standard", fore "black"
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : Build farms

	create a snapshot of a revision
%font "typewriter", fore "blue"
  $ git archive --format=tar \\
        --remote=git://server/repo.git \\
        --prefix=build-dir \\
        tag-to-build | tar xf -
%font "typewriter", fore "grey20"
  $ cd build-dir
  $ make release
%font "standard", fore "black"
%right
>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Tools : misc

	cogito

	git bash completion

	quilt like functionality
		STGIT
		guilt

	gitweb
%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

References

	Getting started
		http://git.or.cz/

	Download
		http://www.kernel.org/pub/software/scm/git/

	GIT 1.5.0 release notes
		http://lwn.net/Articles/222086/


%right
>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

QUESTIONS

